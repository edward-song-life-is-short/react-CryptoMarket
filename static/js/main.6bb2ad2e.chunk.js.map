{"version":3,"sources":["Stock.js","App.js","reportWebVitals.js","index.js"],"names":["StockSymbol","StockSymbol2","counter1","counter2","Stock","props","state","stockChartXValues","stockChartYValues","stockChartX2","stockChartY2","this","fetchStock","fetchStock2","console","log","pointThis","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","setState","API_Call2","stockChartX2ValuesFunction","stockChartY2ValuesFunction","onClick","e","preventDefault","clicked","id","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAKIA,EAAc,OACdC,EAAe,OAEfC,EAAW,EACXC,EAAW,EAqMAC,E,kDAlMX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,kBAAmB,GACnBC,kBAAmB,GACnBC,aAAc,GACdC,aAAc,IANH,E,qDAUnB,WACIC,KAAKC,aACLD,KAAKE,gB,wBAGT,WACIC,QAAQC,IAAI,YAGZ,IAAMC,EAAYL,KAIdM,EAAQ,uFAAmFjB,EAAnF,sCAHI,oBAKZkB,EAA4B,GAC5BC,EAA4B,GAEhCC,MAAMH,GACDI,MACG,SAAUC,GACN,OAAOA,EAASC,UAGvBF,MACG,SAAUG,GAGN,IAAK,IAAIC,KAFTX,QAAQC,IAAIS,GAEIA,EAAK,uBAMjB,GALAN,EAA0BQ,KAAKD,GAC/BN,EAA0BO,KAAKF,EAAK,uBAAuBC,GAAK,cAEhEvB,EAEe,GACX,MAKRc,EAAUW,SACN,CACIpB,kBAAmBW,EACnBV,kBAAmBW,S,yBAW3C,WACIL,QAAQC,IAAI,WACZ,IAAMC,EAAYL,KAIdiB,EAAS,uFAAmF3B,EAAnF,sCAHG,oBAKZ4B,EAA6B,GAC7BC,EAA6B,GAEjCV,MAAMQ,GAEDP,MACG,SAAUC,GACN,OAAOA,EAASC,UAGvBF,MACG,SAAUG,GAKN,IAAK,IAAIC,KAJTX,QAAQC,IAAI,SAGZZ,EAAW,EACKqB,EAAK,uBAMjB,GALAK,EAA2BH,KAAKD,GAChCK,EAA2BJ,KAAKF,EAAK,uBAAuBC,GAAK,cAEjEtB,EAEe,GACX,MAKRa,EAAUW,SACN,CACIlB,aAAcoB,EACdnB,aAAcoB,S,qBAWtC,WACIhB,QAAQC,IAAI,SACZd,EAAe,OACfU,KAAKE,gB,oBAMT,WAAU,IAAD,OACL,OACI,yCACI,wBAAQkB,QAAY,SAACC,GAAOA,EAAEC,iBAAkB,EAAKC,WAArD,0BAEA,qBAAKC,GAAK,aAAV,SACI,cAAC,IAAD,CACIX,KAAM,CACFY,OAAQzB,KAAKL,MAAMC,kBACnB8B,SAAU,CAAC,CACPC,MAAOtC,EACPwB,KAAKb,KAAKL,MAAME,kBAChB+B,gBAAiB,CACb,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEJC,YAAa,CACT,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEJC,YAAa,GAEjB,CACIH,MAAOrC,EACPuB,KAAMb,KAAKL,MAAMI,aACjB6B,gBAAiB,CACb,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEJC,YAAa,CACT,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEJC,YAAa,KAOrBC,QAAS,CACLC,YAAY,EACZC,qBAAqB,c,GAtL7BC,IAAMC,WCCXC,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,0CACE,cAAC,EAAD,oBCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.6bb2ad2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Stock.css\"\r\n\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nlet StockSymbol = 'TSLA';\r\nlet StockSymbol2 = 'MSFT';\r\n\r\nlet counter1 = 0;\r\nlet counter2 = 0;\r\n\r\nclass Stock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stockChartXValues: [],\r\n            stockChartYValues: [],\r\n            stockChartX2: [],\r\n            stockChartY2: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchStock();\r\n        this.fetchStock2();\r\n    }\r\n\r\n    fetchStock() {\r\n        console.log('runnnin2')\r\n        \r\n        \r\n        const pointThis = this;\r\n        const API_KEY = 'EHM4W2PU9UBUEZZ2';\r\n\r\n\r\n        let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\r\n        \r\n        let stockChartXValuesFunction = [];\r\n        let stockChartYValuesFunction = [];\r\n\r\n        fetch(API_Call)\r\n            .then(\r\n                function (response) {\r\n                    return response.json();\r\n                }\r\n            )\r\n            .then(\r\n                function (data) {\r\n                    console.log(data);\r\n                    \r\n                    for (var key in data['Time Series (Daily)']) {\r\n                        stockChartXValuesFunction.push(key);\r\n                        stockChartYValuesFunction.push(data['Time Series (Daily)'][key]['1. open']);\r\n                        \r\n                        counter1++;\r\n\r\n                        if (counter1 > 20) {\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n\r\n                    pointThis.setState(\r\n                        {\r\n                            stockChartXValues: stockChartXValuesFunction,\r\n                            stockChartYValues: stockChartYValuesFunction\r\n                        }\r\n                    );\r\n                    \r\n                    //console.log(stockChartXValuesFunction);\r\n                }\r\n            )\r\n            \r\n\r\n    }\r\n    \r\n    fetchStock2() {\r\n        console.log('running');\r\n        const pointThis = this;\r\n        const API_KEY = 'EHM4W2PU9UBUEZZ2';\r\n\r\n\r\n        let API_Call2 = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol2}&outputsize=compact&apikey=${API_KEY}`;\r\n        \r\n        let stockChartX2ValuesFunction = [];\r\n        let stockChartY2ValuesFunction = [];\r\n\r\n        fetch(API_Call2)\r\n            \r\n            .then(\r\n                function (response) {\r\n                    return response.json();\r\n                }\r\n            )\r\n            .then(\r\n                function (data) {\r\n                    console.log('hello');\r\n                    \r\n                   \r\n                    counter2 = 0;\r\n                    for (var key in data['Time Series (Daily)']) {\r\n                        stockChartX2ValuesFunction.push(key);\r\n                        stockChartY2ValuesFunction.push(data['Time Series (Daily)'][key]['1. open']);\r\n                        \r\n                        counter2++;\r\n\r\n                        if (counter2 > 20) {\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n\r\n                    pointThis.setState(\r\n                        {\r\n                            stockChartX2: stockChartX2ValuesFunction,\r\n                            stockChartY2: stockChartY2ValuesFunction\r\n                        }\r\n                    );\r\n                    \r\n                    //console.log(stockChartXValuesFunction);\r\n                }\r\n            )\r\n            \r\n\r\n    }\r\n\r\n    clicked() {\r\n        console.log('click');\r\n        StockSymbol2 = 'AMZN';\r\n        this.fetchStock2();\r\n            \r\n    }\r\n\r\n//this.state.stockChartYValues\r\n//this.state.stockChartY2\r\n    render() {\r\n        return (\r\n            <div> Stock\r\n                <button onClick = { (e) => {e.preventDefault(); this.clicked(); }} > The Button </button>\r\n                \r\n                <div id = \"stockGraph\">\r\n                    <Line\r\n                        data={{\r\n                            labels: this.state.stockChartXValues,\r\n                            datasets: [{\r\n                                label: StockSymbol,\r\n                                data:this.state.stockChartYValues,\r\n                                backgroundColor: [\r\n                                    'rgba(255, 99, 132, 0.2)',\r\n                                    'rgba(54, 162, 235, 0.2)',\r\n                                    'rgba(255, 206, 86, 0.2)',\r\n                                    'rgba(75, 192, 192, 0.2)',\r\n                                    'rgba(153, 102, 255, 0.2)',\r\n                                    'rgba(255, 159, 64, 0.2)'\r\n                                ],\r\n                                borderColor: [\r\n                                    'rgba(255, 99, 132, 1)',\r\n                                    'rgba(54, 162, 235, 1)',\r\n                                    'rgba(255, 206, 86, 1)',\r\n                                    'rgba(75, 192, 192, 1)',\r\n                                    'rgba(153, 102, 255, 1)',\r\n                                    'rgba(255, 159, 64, 1)'\r\n                                ],\r\n                                borderWidth: 1\r\n                            },\r\n                            {\r\n                                label: StockSymbol2,\r\n                                data: this.state.stockChartY2,\r\n                                backgroundColor: [\r\n                                    'rgba(255, 99, 132, 0.2)',\r\n                                    'rgba(54, 162, 235, 0.2)',\r\n                                    'rgba(255, 206, 86, 0.2)',\r\n                                    'rgba(75, 192, 192, 0.2)',\r\n                                    'rgba(153, 102, 255, 0.2)',\r\n                                    'rgba(255, 159, 64, 0.2)'\r\n                                ],\r\n                                borderColor: [\r\n                                    'rgba(255, 99, 132, 1)',\r\n                                    'rgba(54, 162, 235, 1)',\r\n                                    'rgba(255, 206, 86, 1)',\r\n                                    'rgba(75, 192, 192, 1)',\r\n                                    'rgba(153, 102, 255, 1)',\r\n                                    'rgba(255, 159, 64, 1)'\r\n                                ],\r\n                                borderWidth: 1\r\n\r\n                            }\r\n                            ]\r\n                        }}\r\n                        \r\n                    \r\n                        options={{\r\n                            responsive: true,\r\n                            maintainAspectRatio: true\r\n                            \r\n                        }}\r\n\r\n                    />\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Stock;","import './App.css';\nimport Stock from './Stock'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1> stonks </h1>\n        <Stock> </Stock>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}