{"version":3,"sources":["Stock.js","App.js","reportWebVitals.js","index.js"],"names":["Stock","props","state","stockChartXValues","stockChartYValues","this","fetchStock","pointThis","console","log","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","setState","x","y","type","mode","marker","color","layout","width","height","title","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSA+EeA,E,kDA1EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,kBAAmB,GACnBC,kBAAmB,IAJR,E,qDAQnB,WACIC,KAAKC,e,wBAGT,WACI,IAAMC,EAAYF,KAGlBG,QAAQC,IAAIF,GAIZ,IACIG,EAAQ,uFADM,KACN,sCAPI,oBASZC,EAA4B,GAC5BC,EAA4B,GAEhCC,MAAMH,GACDI,MACG,SAAUC,GACN,OAAOA,EAASC,UAGvBF,MACG,SAAUG,GAGN,IAAK,IAAIC,KAFTV,QAAQC,IAAIQ,GAEIA,EAAK,uBACjBN,EAA0BQ,KAAKD,GAC/BN,EAA0BO,KAAKF,EAAK,uBAAuBC,GAAK,YAGpEX,EAAUa,SACN,CACIjB,kBAAmBQ,EACnBP,kBAAmBQ,S,oBAQ3C,WACI,OACI,yCAEI,cAAC,IAAD,CACIK,KAAM,CACF,CACII,EAAGhB,KAAKH,MAAMC,kBACdmB,EAAGjB,KAAKH,MAAME,kBACdmB,KAAM,UACNC,KAAM,gBACNC,OAAQ,CAAEC,MAAO,SAGzBC,OAAQ,CAAEC,MAAO,KAAMC,OAAQ,KAAMC,MAAO,yB,GAnE5CC,IAAMC,WCQXC,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,0CACE,cAAC,EAAD,oBCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f2f2df21.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Stock.css\"\r\nimport Plot from 'react-plotly.js';\r\n\r\nclass Stock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stockChartXValues: [],\r\n            stockChartYValues: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchStock();\r\n    }\r\n\r\n    fetchStock() {\r\n        const pointThis = this;\r\n        const API_KEY = 'EHM4W2PU9UBUEZZ2';\r\n\r\n        console.log(pointThis);\r\n\r\n\r\n\r\n        let StockSymbol = 'FB';\r\n        let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\r\n\r\n        let stockChartXValuesFunction = [];\r\n        let stockChartYValuesFunction = [];\r\n\r\n        fetch(API_Call)\r\n            .then(\r\n                function (response) {\r\n                    return response.json();\r\n                }\r\n            )\r\n            .then(\r\n                function (data) {\r\n                    console.log(data);\r\n\r\n                    for (var key in data['Time Series (Daily)']) {\r\n                        stockChartXValuesFunction.push(key);\r\n                        stockChartYValuesFunction.push(data['Time Series (Daily)'][key]['1. open']);\r\n                    }\r\n\r\n                    pointThis.setState(\r\n                        {\r\n                            stockChartXValues: stockChartXValuesFunction,\r\n                            stockChartYValues: stockChartYValuesFunction\r\n                        }\r\n                    );\r\n                    //console.log(stockChartXValuesFunction);\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div> Stock\r\n\r\n                <Plot\r\n                    data={[\r\n                        {\r\n                            x: this.state.stockChartXValues,\r\n                            y: this.state.stockChartYValues,\r\n                            type: 'scatter',\r\n                            mode: 'lines+markers',\r\n                            marker: { color: 'red' },\r\n                        },\r\n                    ]}\r\n                    layout={{ width: 1920, height: 1080, title: 'A Fancy Plot' }}\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Stock;","import './App.css';\nimport Stock from './Stock'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1> stonks </h1>\n        <Stock> </Stock>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}