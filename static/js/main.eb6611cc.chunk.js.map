{"version":3,"sources":["SmallComponents/button.js","Stock.js","SmallComponents/timer.js","App.js","reportWebVitals.js","index.js"],"names":["myfirstelement","ReactDOM","render","document","getElementById","Button","onClick","this","props","React","Component","StockSymbol2","counter1","counter2","stockArr","stockView","Stock","state","stockChartXValues","stockChartYValues","stockChartX2","stockChartY2","stock","console","log","setStock","bind","setState","pointThis","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","API_Call2","stockChartX2ValuesFunction","stockChartY2ValuesFunction","id","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","fetchStock","fetchStock2","Timers","date","Date","toLocaleTimeString","setInterval","clearInterval","intervalID","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.eb6611cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./button.css\";\r\n\r\n\r\nimport ReactDOM from 'react-dom';\r\nconst myfirstelement = <h1>Hello React!</h1>\r\n\r\nReactDOM.render(myfirstelement, document.getElementById('headers'));\r\n\r\nclass Button extends React.Component {\r\n    \r\n    render() {   \r\n        return (\r\n           <div>\r\n\r\n            <button onClick = {this.props.onClick} > Button </button>\r\n             \r\n          </div>\r\n          \r\n        );\r\n    }\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport \"./Stock.css\"\r\nimport Button from './SmallComponents/button.js'\r\n\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nlet StockSymbol2 = 'MSFT';\r\n\r\nlet counter1 = 0;\r\nlet counter2 = 0;\r\n\r\nlet stockArr = ['FB', 'MSFT', 'IBM', 'TSLA', 'AMZN'];\r\n\r\nlet stockView = 0;\r\n\r\nclass Stock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stockChartXValues: [],\r\n            stockChartYValues: [],\r\n            stockChartX2: [],\r\n            stockChartY2: [],\r\n        }\r\n        this.stock = stockArr[0];\r\n        console.log(this.stock)\r\n\r\n        this.setStock = this.setStock.bind(this);\r\n    }\r\n\r\n    setStock() {\r\n        stockView++;\r\n        \r\n        if(stockView > 4) {\r\n            stockView = 0;\r\n        }\r\n        this.setState({stock: stockArr[stockView]});\r\n        \r\n    }\r\n\r\n    fetchStock() {\r\n        console.log(this.stock);\r\n        const pointThis = this;\r\n        const API_KEY = 'EHM4W2PU9UBUEZZ2';\r\n\r\n       \r\n        let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${this.stock}&outputsize=compact&apikey=${API_KEY}`;\r\n\r\n        let stockChartXValuesFunction = [];\r\n        let stockChartYValuesFunction = [];\r\n\r\n        fetch(API_Call)\r\n            .then(\r\n                function (response) {\r\n                    return response.json();\r\n                }\r\n            )\r\n            .then(\r\n                function (data) {\r\n                    console.log(data);\r\n\r\n                    for (var key in data['Time Series (Daily)']) {\r\n                        stockChartXValuesFunction.push(key);\r\n                        stockChartYValuesFunction.push(data['Time Series (Daily)'][key]['1. open']);\r\n\r\n                        counter1++;\r\n\r\n                        if (counter1 > 20) {\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n\r\n                    pointThis.setState(\r\n                        {\r\n                            stockChartXValues: stockChartXValuesFunction,\r\n                            stockChartYValues: stockChartYValuesFunction\r\n                        }\r\n                    );\r\n\r\n                    //console.log(stockChartXValuesFunction);\r\n                }\r\n            )\r\n\r\n\r\n    }\r\n\r\n    fetchStock2() {\r\n        console.log('running');\r\n        const pointThis = this;\r\n        const API_KEY = 'EHM4W2PU9UBUEZZ2';\r\n\r\n\r\n        let API_Call2 = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol2}&outputsize=compact&apikey=${API_KEY}`;\r\n\r\n        let stockChartX2ValuesFunction = [];\r\n        let stockChartY2ValuesFunction = [];\r\n\r\n        fetch(API_Call2)\r\n\r\n            .then(\r\n                function (response) {\r\n                    return response.json();\r\n                }\r\n            )\r\n            .then(\r\n                function (data) {\r\n                    console.log('hello');\r\n\r\n\r\n                    counter2 = 0;\r\n                    for (var key in data['Time Series (Daily)']) {\r\n                        stockChartX2ValuesFunction.push(key);\r\n                        stockChartY2ValuesFunction.push(data['Time Series (Daily)'][key]['1. open']);\r\n\r\n                        counter2++;\r\n\r\n                        if (counter2 > 20) {\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n\r\n                    pointThis.setState(\r\n                        {\r\n                            stockChartX2: stockChartX2ValuesFunction,\r\n                            stockChartY2: stockChartY2ValuesFunction\r\n                        }\r\n                    );\r\n\r\n                }\r\n            )\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div> Stock\r\n                {/* <button onClick={(e) => { e.preventDefault(); this.clicked(); }} > The Button </button> */}\r\n\r\n                <div id=\"stockGraph\">\r\n                    <h1> Stocnks </h1>\r\n                    <Button  onClick = {this.setStock} />\r\n\r\n\r\n                    <Line\r\n                        data={{\r\n                            labels: this.state.stockChartXValues,\r\n                            datasets: [{\r\n                                label: this.state.stock,\r\n                                data: this.state.stockChartYValues,\r\n                                backgroundColor: [\r\n                                    'rgba(255, 99, 132, 0.2)',\r\n                                    'rgba(54, 162, 235, 0.2)',\r\n                                    'rgba(255, 206, 86, 0.2)',\r\n                                    'rgba(75, 192, 192, 0.2)',\r\n                                    'rgba(153, 102, 255, 0.2)',\r\n                                    'rgba(255, 159, 64, 0.2)'\r\n                                ],\r\n                                borderColor: [\r\n                                    'rgba(255, 99, 132, 1)',\r\n                                    'rgba(54, 162, 235, 1)',\r\n                                    'rgba(255, 206, 86, 1)',\r\n                                    'rgba(75, 192, 192, 1)',\r\n                                    'rgba(153, 102, 255, 1)',\r\n                                    'rgba(255, 159, 64, 1)'\r\n                                ],\r\n                                borderWidth: 1\r\n                            },\r\n                            {\r\n                                label: StockSymbol2,\r\n                                data: this.state.stockChartY2,\r\n                                backgroundColor: [\r\n                                    'rgba(255, 99, 132, 0.2)',\r\n                                    'rgba(54, 162, 235, 0.2)',\r\n                                    'rgba(255, 206, 86, 0.2)',\r\n                                    'rgba(75, 192, 192, 0.2)',\r\n                                    'rgba(153, 102, 255, 0.2)',\r\n                                    'rgba(255, 159, 64, 0.2)'\r\n                                ],\r\n                                borderColor: [\r\n                                    'rgba(255, 99, 132, 1)',\r\n                                    'rgba(54, 162, 235, 1)',\r\n                                    'rgba(255, 206, 86, 1)',\r\n                                    'rgba(75, 192, 192, 1)',\r\n                                    'rgba(153, 102, 255, 1)',\r\n                                    'rgba(255, 159, 64, 1)'\r\n                                ],\r\n                                borderWidth: 1\r\n\r\n                            }\r\n                            ]\r\n                        }}\r\n\r\n\r\n                        options={{\r\n                            responsive: true,\r\n                            maintainAspectRatio: true\r\n\r\n                        }}\r\n\r\n                    />\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchStock();\r\n        this.fetchStock2();\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Stock;","import React from 'react'\r\nimport './timer.css'\r\n\r\nclass Timers extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {date: new Date(), stock: {}};\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div> <h1> {this.state.date.toLocaleTimeString()} </h1> </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        const oneSecond = 1000;\r\n        setInterval(() => {\r\n          this.setState({ date: new Date() });\r\n        }, oneSecond);\r\n      }\r\n\r\n      componentWillUnmount(){\r\n        clearInterval(this.intervalID);\r\n      }\r\n}\r\n\r\nexport default Timers;\r\n\r\n","import './App.css';\nimport Stock from './Stock'\nimport React from 'react';\nimport Timers from './SmallComponents/timer.js'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Timers />\n      <h1> stfonks </h1>\n        <Stock> </Stock>\n        \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}